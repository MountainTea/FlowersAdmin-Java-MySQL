package dao.impl;

import dao.InboundOrderDao;
import exception.ServiceException;
import model.InboundOrder;
import util.DbConnection;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class InboundOrderDaoImpl implements InboundOrderDao {


    @Override
    public List<InboundOrder> getAllInboundOrders() throws ServiceException {
        List<InboundOrder> list = new ArrayList<>();
        String sql = "SELECT * FROM v_inbound_header_summary";
        try (Connection conn = DbConnection.getDb();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                list.add(mapRowToInboundOrder(rs));
            }
        } catch (SQLException e) {
            throw new ServiceException("Error retrieving all inbound orders", e);
        }
        return list;
    }


    @Override
    public InboundOrder getInboundOrderById(int id) throws ServiceException {
        String sql = "SELECT * FROM v_inbound_header_summary WHERE id = ?";
        try (Connection conn = DbConnection.getDb();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return mapRowToInboundOrder(rs);
                }
            }
        } catch (SQLException e) {
            throw new ServiceException("Error retrieving inbound order by id: " + id, e);
        }
        return null;
    }


    @Override
    public InboundOrder getInboundOrderByNo(String inbNo) throws ServiceException {
        String sql = "SELECT * FROM v_inbound_header_summary WHERE inb_no = ?";
        try (Connection conn = DbConnection.getDb();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, inbNo);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return mapRowToInboundOrder(rs);
                }
            }
        } catch (SQLException e) {
            throw new ServiceException("Error retrieving inbound order by inbNo: " + inbNo, e);
        }
        return null;
    }


    @Override
    public boolean insertInboundOrder(InboundOrder inboundOrder) throws ServiceException {
        String sql = "INSERT INTO inbound_header (inb_no, sup_no, inb_date, order_status, note, maintained_by, created_at) "
                   + "VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)";
        try (Connection conn = DbConnection.getDb();
             PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            ps.setString(1, inboundOrder.getInbNo());
            ps.setString(2, inboundOrder.getSupNo());
            ps.setDate(3, new java.sql.Date(inboundOrder.getInbDate().getTime()));
            ps.setInt(4, inboundOrder.getOrderStatus());
            ps.setString(5, inboundOrder.getNote());
            ps.setString(6, inboundOrder.getMaintainedBy());

            int affectedRows = ps.executeUpdate();
            if (affectedRows > 0) {
                try (ResultSet rs = ps.getGeneratedKeys()) {
                    if (rs.next()) {
                        inboundOrder.setId(rs.getInt(1));
                    }
                }
                return true;
            } else {
                return false;
            }
        } catch (SQLException e) {
            throw new ServiceException("Error inserting inbound order", e);
        }
    }


    @Override
    public boolean updateInboundOrder(InboundOrder inboundOrder) throws ServiceException {
        String sql = "UPDATE inbound_header "
                   + "SET sup_no = ?, inb_date = ?, order_status = ?, note = ?, maintained_by = ?, updated_at = CURRENT_TIMESTAMP "
                   + "WHERE inb_no = ?";
        try (Connection conn = DbConnection.getDb();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, inboundOrder.getSupNo());
            ps.setDate(2, new java.sql.Date(inboundOrder.getInbDate().getTime()));
            ps.setInt(3, inboundOrder.getOrderStatus());
            ps.setString(4, inboundOrder.getNote());
            ps.setString(5, inboundOrder.getMaintainedBy());
            ps.setString(6, inboundOrder.getInbNo());

            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            throw new ServiceException("Error updating inbound order with inbNo: " + inboundOrder.getInbNo(), e);
        }
    }


    @Override
    public boolean deleteInboundOrder(int id) throws ServiceException {
        String sql = "DELETE FROM inbound_header WHERE id = ?";
        try (Connection conn = DbConnection.getDb();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            throw new ServiceException("Error deleting inbound order with id: " + id, e);
        }
    }


    @Override
    public String getNextInbNo() throws ServiceException {
        String prefix = "inb";
        java.util.Date today = new java.util.Date(); // 使用 java.util.Date
        String dateStr = new SimpleDateFormat("yyyyMMdd").format(today);
        String likeStr = prefix + dateStr + "%";

        String sql = "SELECT inb_no FROM inbound_header WHERE inb_no LIKE ? ORDER BY inb_no DESC LIMIT 1";
        try (Connection conn = DbConnection.getDb();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, likeStr);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    String lastInbNo = rs.getString("inb_no");
                    // "inb" (3 chars) + 8位日期 => 11 chars
                    String last3Digits = lastInbNo.substring(11); 
                    int num = Integer.parseInt(last3Digits);
                    num++;
                    return prefix + dateStr + String.format("%03d", num);
                } else {
                    return prefix + dateStr + "001";
                }
            }
        } catch (SQLException e) {
            throw new ServiceException("Error generating next inbound no", e);
        }
    }


    private InboundOrder mapRowToInboundOrder(ResultSet rs) throws SQLException {
        InboundOrder io = new InboundOrder();
        io.setId(rs.getInt("id"));
        io.setInbNo(rs.getString("inb_no"));
        io.setSupNo(rs.getString("sup_no"));
        // ★ 若從 view 撈，會有 sup_name 欄位
        try {
            io.setSupName(rs.getString("sup_name")); 
        } catch (SQLException ignored) {
        }

        io.setInbDate(rs.getDate("inb_date"));
        io.setOrderStatus(rs.getInt("order_status"));
        io.setNote(rs.getString("note"));
        io.setMaintainedBy(rs.getString("maintained_by"));
        io.setCreatedAt(rs.getTimestamp("created_at"));
        io.setUpdatedAt(rs.getTimestamp("updated_at"));

        return io;
    }
}
